class Solution {
    public int longestConsecutive(int[] nums) {

         if (nums == null || nums.length == 0) {
            return 0;
        }

        // Create a HashSet to store the unique elements of the array
        HashSet<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }

        int longestStreak = 0;

        // Iterate through the array to find the longest consecutive sequence
        for (int num : numSet) {
            if (!numSet.contains(num - 1)) {  // if there is no smallest element then curElement is smallest
                int currentNum = num;
                int currentStreak = 1;

                //if there is num+1 element available in the set there is cconsecutive
                while (numSet.contains(currentNum + 1)) {
                    currentNum++;
                    currentStreak++;
                }

                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }

        return longestStreak;

    }
}
TC:O(n)
SC:O(n)...hashset uses:  hashset is used to store the unique elements


class Solution {
    public int longestConsecutive(int[] nums) {
       
       if(nums.length==0){
           return 0;
       }
       Arrays.sort(nums);
       int res = 1;
       int count = 1;

       for(int i=1; i<nums.length; i++){
           if(nums[i]==nums[i-1]) continue;
           if(nums[i-1]+1==nums[i]){
                count++;
                res = Math.max(count,res);
           }
           else{
               count = 1;
           }
       }
       return res;
    }
}
TC:O(nlogn)
SC:O(1)