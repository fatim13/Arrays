https://leetcode.com/problems/maximum-subarray/

class Solution {
    public int maxSubArray(int[] nums) {
      int maxSum = nums[0];
      int globalSum = nums[0];

      for(int i=1; i<nums.length; i++){
        //it gives the maximum starting index.
          maxSum = Math.max(nums[i],nums[i]+maxSum);
          
          globalSum = Math.max(globalSum, maxSum);
      }
      return globalSum;
    }
}

SC:O(1)
TC:O(n)
Algo: kidane's algorithm.
why?
Kadane's Algorithm is particularly well-suited for cases where you only need to find the maximum subarray sum and 
don't need the actual subarray itself. it gives TC O(n). n is length array