class Solution {
    public int majorityElement(int[] arr) {
        int n = arr.length;
        int count = 1;
        int res = 0;
        Arrays.sort(arr);

//if it is single element
        if(n==1){
            return arr[n-1];
        }

        for(int i = 0; i < n-1; i++){
            if(arr[i] == arr[i+1]){
                  count++;
            }    
           else{
                 count = 1;
            }
            
            if(count > n/2){
                return arr[i];
            }

        }
    
        return 1;
    }
}

//if we want elements which appear > n/2 times..then that element must be mid elenment
class Solution {
    public int majorityElement(int[] arr) {
        int n = arr.length;
        Arrays.sort(arr);
        return arr[n/2];
    }
}
//TC: nlogn --sorting , SC O(1)


optimize appraoch.
public class Solution {
    public int majorityElement(int[] nums) {
        int candidate = 0;
        int vote = 0;

        for(int num: nums){

            //if vote is 0 means it is new candidate
            if(vote==0){
                candidate = num;
            }
            if(num==candidate){
                vote++;
            }else{
                vote--;
            }
        }
        //which contains the majority element
        return candidate;
    }
}

//boymore vote algorithm/ Moore's Voting Algorithm:
//TC:O(n)
//SC:O(1)  
[2,2,1,1,1,2,2]
output: 2


class Solution {
    public int majorityElement(int[] arr) {
        int candidate = 0;
        int vote = 0;

        for (int num : arr) {
            if (count == 0) {
                candidate = num;
            }

            vote += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}

Using if elseclass Solution {
    public int majorityElement(int[] nums) {
       int vote = 0, candidate = 0;
 
    // Finding majority candidate
    for (int i = 0; i < nums.length; i++) {
      if (vote == 0) {
        candidate = nums[i];
        vote = 1;
      }
      else {
        if (nums[i] == candidate)
          vote++;
        else
          vote--;
        }
      }
    return candidate;
    }
}